-- Create Shifts table
CREATE TABLE Shifts (
    shift_id INT AUTO_INCREMENT PRIMARY KEY,
    shift_name VARCHAR(50) NOT NULL
);

-- Insert shift options
INSERT INTO Shifts (shift_name) VALUES
('dagvagt'),
('aftenvagt'),
('natvagt'),
('fastvagt');

-- Create Qualifications table
CREATE TABLE Qualifications (
    qualification_id INT AUTO_INCREMENT PRIMARY KEY,
    qualification_name VARCHAR(50) NOT NULL
);

-- Insert qualification options
INSERT INTO Qualifications (qualification_name) VALUES
('SSA'),
('SSH'),
('sygeplejerske'),
('pædagog');

-- Create Bookings table
CREATE TABLE Bookings (
    booking_id INT AUTO_INCREMENT PRIMARY KEY,
    place VARCHAR(100) NOT NULL,
    date DATE NOT NULL,
    hours INT NOT NULL,
    shift_id INT,
    qualification_id INT,
    FOREIGN KEY (shift_id) REFERENCES Shifts(shift_id),
    FOREIGN KEY (qualification_id) REFERENCES Qualifications(qualification_id)
);



create_booking.php

<?php
// Include database connection file
require_once "db_connection.php";

// Retrieve form data
$place = $_POST['place'];
$date = $_POST['date'];
$hours = $_POST['hours'];
$shift_id = $_POST['shift_id'];
$qualification_id = $_POST['qualification_id'];

// Validate input (you can add more validation as needed)
if(empty($place) || empty($date) || empty($hours) || empty($shift_id) || empty($qualification_id)) {
    // Handle validation errors
    die("Please fill in all required fields.");
}

// Insert into database
$query = "INSERT INTO Bookings (place, date, hours, shift_id, qualification_id) VALUES (?, ?, ?, ?, ?)";
$stmt = $mysqli->prepare($query);
$stmt->bind_param("ssiii", $place, $date, $hours, $shift_id, $qualification_id);

if($stmt->execute()) {
    // Booking successful
    echo "Booking created successfully!";
} else {
    // Handle errors
    echo "Error creating booking: " . $mysqli->error;
}

// Close statement and database connection
$stmt->close();
$mysqli->close();
?>



retrieve_bookings.php

<?php
// Include database connection file
require_once "db_connection.php";

// Retrieve pagination parameters from frontend
$page = $_GET['page']; // Current page number
$records_per_page = $_GET['records_per_page']; // Number of records per page

// Calculate offset for pagination
$offset = ($page - 1) * $records_per_page;

// Retrieve bookings with pagination
$query = "SELECT * FROM Bookings LIMIT ?, ?";
$stmt = $mysqli->prepare($query);
$stmt->bind_param("ii", $offset, $records_per_page);
$stmt->execute();
$result = $stmt->get_result();

// Fetch bookings and store in an array
$bookings = array();
while ($row = $result->fetch_assoc()) {
    $bookings[] = $row;
}

// Close statement and database connection
$stmt->close();
$mysqli->close();

// Return bookings in JSON format
echo json_encode($bookings);
?>


delete_booking.php

<?php
// Include database connection file
require_once "db_connection.php";

// Check if booking ID is provided
if (!isset($_POST['booking_id'])) {
    die("Booking ID is not provided.");
}

// Retrieve booking ID from frontend
$booking_id = $_POST['booking_id'];

// Delete booking from database
$query = "DELETE FROM Bookings WHERE booking_id = ?";
$stmt = $mysqli->prepare($query);
$stmt->bind_param("i", $booking_id);

if ($stmt->execute()) {
    // Deletion successful
    echo "Booking deleted successfully!";
} else {
    // Handle errors
    echo "Error deleting booking: " . $mysqli->error;
}

// Close statement and database connection
$stmt->close();
$mysqli->close();
?>

TEST

retrieve_bookings.php?page=1&records_per_page=10

// Assuming the booking ID to delete is 123
POST request to delete_booking.php with parameters:
booking_id=123



HTML/CSS

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Booking System</title>
<style>
/* Basic CSS for styling */
table {
    width: 100%;
    border-collapse: collapse;
}

table, th, td {
    border: 1px solid black;
}

th, td {
    padding: 8px;
    text-align: left;
}

button {
    padding: 5px 10px;
    cursor: pointer;
}

</style>
</head>
<body>

<h2>Booking System</h2>

<!-- Booking Creation Form -->
<h3>Create Booking</h3>
<form id="bookingForm">
    <label for="place">Place:</label>
    <input type="text" id="place" name="place" required><br><br>
    
    <label for="date">Date:</label>
    <input type="date" id="date" name="date" required><br><br>
    
    <label for="hours">Number of Hours:</label>
    <input type="number" id="hours" name="hours" required><br><br>
    
    <label for="shift">Shift:</label>
    <select id="shift" name="shift" required>
        <option value="">Select Shift</option>
        <option value="1">dagvagt</option>
        <option value="2">aftenvagt</option>
        <option value="3">natvagt</option>
        <option value="4">fastvagt</option>
    </select><br><br>
    
    <label for="qualification">Qualification:</label>
    <select id="qualification" name="qualification" required>
        <option value="">Select Qualification</option>
        <option value="1">SSA</option>
        <option value="2">SSH</option>
        <option value="3">sygeplejerske</option>
        <option value="4">pædagog</option>
    </select><br><br>
    
    <button type="submit">Create Booking</button>
</form>

<!-- Display Bookings -->
<h3>Bookings</h3>
<table id="bookingsTable">
    <thead>
        <tr>
            <th>Place</th>
            <th>Date</th>
            <th>Hours</th>
            <th>Shift</th>
            <th>Qualification</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="bookingsBody">
        <!-- Bookings will be dynamically added here -->
    </tbody>
</table>

<!-- Pagination -->
<div id="pagination">
    <!-- Pagination links will be dynamically added here -->
</div>

<script>
// JavaScript code for interacting with backend scripts and updating frontend dynamically
// Add event listener for form submission
document.getElementById('bookingForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent default form submission
    
    // Gather form data
    var formData = new FormData(this);
    
    // Send POST request to create_booking.php
    fetch('create_booking.php', {
        method: 'POST',
        body: formData
    })
    .then(response => response.text())
    .then(data => {
        alert(data); // Show response message
        // Optionally, reload bookings after creation
        // loadBookings();
    })
    .catch(error => console.error('Error:', error));
});

// Function to load bookings from backend with pagination
function loadBookings(page) {
    var recordsPerPage = 10; // Adjust as needed
    var url = `retrieve_bookings.php?page=${page}&records_per_page=${recordsPerPage}`;
    
    fetch(url)
    .then(response => response.json())
    .then(data => {
        var tbody = document.getElementById('bookingsBody');
        tbody.innerHTML = ''; // Clear existing data
        
        // Populate table with retrieved bookings
        data.bookings.forEach(booking => {
            var row = document.createElement('tr');
            row.innerHTML = `
                <td>${booking.place}</td>
                <td>${booking.date}</td>
                <td>${booking.hours}</td>
                <td>${booking.shift_name}</td>
                <td>${booking.qualification_name}</td>
                <td><button onclick="deleteBooking(${booking.booking_id})">Delete</button></td>
            `;
            tbody.appendChild(row);
        });
        
        // Generate pagination links
        var paginationDiv = document.getElementById('pagination');
        paginationDiv.innerHTML = ''; // Clear existing pagination links
        var totalPages = Math.ceil(data.total_records / recordsPerPage);
        for (var i = 1; i <= totalPages; i++) {
            var link = document.createElement('a');
            link.href = '#';
            link.textContent = i;
            link.onclick = function() {
                loadBookings(this.textContent); // Load bookings for clicked page
            };
            paginationDiv.appendChild(link);
        }
    })
    .catch(error => console.error('Error:', error));
}


// Function to delete a booking
function deleteBooking(bookingId) {
    var confirmation = confirm("Are you sure you want to delete this booking?");
    if (confirmation) {
        var formData = new FormData();
        formData.append('booking_id', bookingId);
        
        fetch('delete_booking.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(data => {
            alert(data); // Show response message
            // Optionally, reload bookings after deletion
            // loadBookings();
        })
        .catch(error => console.error('Error:', error));
    }
}

// Load bookings when the page loads
document.addEventListener('DOMContentLoaded', function() {
    loadBookings(1); // Load first page of bookings
});
</script>

</body>
</html>


In this example:

We have a form to allow users to input booking details (place, date, hours, shift, qualification).
Bookings retrieved from the backend are displayed in a table.
Each booking has a delete button to allow users to delete it.
Pagination is not implemented in this example, but you can add it by modifying the loadBookings function to include pagination logic and adding pagination links dynamically.

In this updated function (loadBookings):

We accept the current page number as a parameter.
Pagination links are dynamically generated based on the total number of pages (totalPages).
Each pagination link calls the loadBookings function with the corresponding page number when clicked.


HTML/CSS as PHP

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Booking System</title>
<style>
/* Basic CSS for styling */
table {
    width: 100%;
    border-collapse: collapse;
}

table, th, td {
    border: 1px solid black;
}

th, td {
    padding: 8px;
    text-align: left;
}

button {
    padding: 5px 10px;
    cursor: pointer;
}

</style>
</head>
<body>

<h2>Booking System</h2>

<!-- Booking Creation Form -->
<h3>Create Booking</h3>
<form id="bookingForm" method="post" action="create_booking.php">
    <label for="place">Place:</label>
    <input type="text" id="place" name="place" required><br><br>
    
    <label for="date">Date:</label>
    <input type="date" id="date" name="date" required><br><br>
    
    <label for="hours">Number of Hours:</label>
    <input type="number" id="hours" name="hours" required><br><br>
    
    <label for="shift">Shift:</label>
    <select id="shift" name="shift" required>
        <option value="">Select Shift</option>
        <option value="1">dagvagt</option>
        <option value="2">aftenvagt</option>
        <option value="3">natvagt</option>
        <option value="4">fastvagt</option>
    </select><br><br>
    
    <label for="qualification">Qualification:</label>
    <select id="qualification" name="qualification" required>
        <option value="">Select Qualification</option>
        <option value="1">SSA</option>
        <option value="2">SSH</option>
        <option value="3">sygeplejerske</option>
        <option value="4">pædagog</option>
    </select><br><br>
    
    <button type="submit">Create Booking</button>
</form>

<!-- Display Bookings -->
<h3>Bookings</h3>
<table id="bookingsTable">
    <thead>
        <tr>
            <th>Place</th>
            <th>Date</th>
            <th>Hours</th>
            <th>Shift</th>
            <th>Qualification</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="bookingsBody">
        <?php
        // Include PHP script to retrieve bookings
        require_once "retrieve_bookings.php";
        ?>
    </tbody>
</table>

<!-- Pagination -->
<div id="pagination">
    <?php
    // Include PHP script to generate pagination links
    require_once "pagination.php";
    ?>
</div>

<script>
// JavaScript code for interacting with backend scripts and updating frontend dynamically
// Function to delete a booking
function deleteBooking(bookingId) {
    var confirmation = confirm("Are you sure you want to delete this booking?");
    if (confirmation) {
        var formData = new FormData();
        formData.append('booking_id', bookingId);
        
        fetch('delete_booking.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(data => {
            alert(data); // Show response message
            // Reload the page after deletion
            location.reload();
        })
        .catch(error => console.error('Error:', error));
    }
}
</script>

</body>
</html>

In this PHP file:

The booking creation form submits data to create_booking.php.
The bookings table is populated by including the PHP script retrieve_bookings.php, which retrieves bookings from the backend.
Pagination links are generated by including the PHP script pagination.php, which generates pagination links.
Make sure to replace "retrieve_bookings.php" and "pagination.php" with the actual filenames of your PHP scripts that handle retrieving bookings and generating pagination links.


pagination.php

<?php
// Function to generate pagination links
function generatePaginationLinks($currentPage, $totalPages, $url) {
    $pagination = ''; // Initialize empty pagination string

    // Generate "Previous" link if not on first page
    if ($currentPage > 1) {
        $prevPage = $currentPage - 1;
        $pagination .= "<a href='{$url}?page={$prevPage}'>&laquo; Previous</a>";
    }

    // Generate numeric pagination links
    for ($i = 1; $i <= $totalPages; $i++) {
        $activeClass = ($i == $currentPage) ? 'active' : '';
        $pagination .= "<a class='{$activeClass}' href='{$url}?page={$i}'>{$i}</a>";
    }

    // Generate "Next" link if not on last page
    if ($currentPage < $totalPages) {
        $nextPage = $currentPage + 1;
        $pagination .= "<a href='{$url}?page={$nextPage}'>Next &raquo;</a>";
    }

    return $pagination;
}

// Example usage:
// $currentPage = 1; // Current page number
// $totalPages = 5; // Total number of pages
// $url = 'example.php'; // URL of the page
// echo generatePaginationLinks($currentPage, $totalPages, $url);
?>

In this script:

We define a function generatePaginationLinks that accepts the current page number, total number of pages, and the URL of the page as parameters.
Inside the function, we generate pagination links including "Previous", numeric page links, and "Next" links based on the current page number and total number of pages.
The function returns the generated pagination links as a string.

To use this pagination script:

Include the pagination.php file in your PHP file where you want to display pagination links.
Call the generatePaginationLinks function with appropriate parameters (current page number, total number of pages, and URL of the page).
Echo the returned pagination links where you want them to appear in your HTML.


SQL

-- Alter Bookings table to add assigned_user_id column
ALTER TABLE Bookings
ADD COLUMN assigned_user_id INT DEFAULT NULL;


Updated HTML/CSS

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Booking System</title>
<style>
/* Basic CSS for styling */
table {
    width: 100%;
    border-collapse: collapse;
}

table, th, td {
    border: 1px solid black;
}

th, td {
    padding: 8px;
    text-align: left;
}

button {
    padding: 5px 10px;
    cursor: pointer;
}
</style>
</head>
<body>

<h2>Booking System</h2>

<!-- Booking Creation Form -->
<!-- Booking creation form code here -->

<!-- Display Bookings -->
<h3>Bookings</h3>
<table id="bookingsTable">
    <thead>
        <tr>
            <th>Place</th>
            <th>Date</th>
            <th>Hours</th>
            <th>Shift</th>
            <th>Qualification</th>
            <th>Assigned User</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="bookingsBody">
        <!-- Bookings will be dynamically added here -->
    </tbody>
</table>

<!-- Pagination -->
<div id="pagination">
    <!-- Pagination links will be dynamically added here -->
</div>

<script>
// JavaScript code for interacting with backend scripts and updating frontend dynamically
// Function to load bookings from backend with pagination
function loadBookings(page) {
    var recordsPerPage = 10; // Adjust as needed
    var url = `retrieve_bookings.php?page=${page}&records_per_page=${recordsPerPage}`;
    
    fetch(url)
    .then(response => response.json())
    .then(data => {
        var tbody = document.getElementById('bookingsBody');
        tbody.innerHTML = ''; // Clear existing data
        
        // Populate table with retrieved bookings
        data.bookings.forEach(booking => {
            var row = document.createElement('tr');
            row.innerHTML = `
                <td>${booking.place}</td>
                <td>${booking.date}</td>
                <td>${booking.hours}</td>
                <td>${booking.shift_name}</td>
                <td>${booking.qualification_name}</td>
                <td>${booking.assigned_user_id ? 'Assigned' : 'Unassigned'}</td>
                <td>
                    <button onclick="assignUser(${booking.booking_id})">Assign</button>
                    <button onclick="unassignUser(${booking.booking_id})">Unassign</button>
                </td>
            `;
            tbody.appendChild(row);
        });
        
        // Generate pagination links
        var paginationDiv = document.getElementById('pagination');
        paginationDiv.innerHTML = ''; // Clear existing pagination links
        var totalPages = Math.ceil(data.total_records / recordsPerPage);
        for (var i = 1; i <= totalPages; i++) {
            var link = document.createElement('a');
            link.href = '#';
            link.textContent = i;
            link.onclick = function() {
                loadBookings(this.textContent); // Load bookings for clicked page
            };
            paginationDiv.appendChild(link);
        }
    })
    .catch(error => console.error('Error:', error));
}

// Function to assign user to a booking
function assignUser(bookingId) {
    // Add code to prompt admin to select user and update assigned_user_id in the database
}

// Function to unassign user from a booking
function unassignUser(bookingId) {
    // Add code to update assigned_user_id to NULL in the database
}

// Load bookings when the page loads
document.addEventListener('DOMContentLoaded', function() {
    loadBookings(1); // Load first page of bookings
});
</script>

</body>
</html>


assign_user.php

<?php
// Include database connection file
require_once "db_connection.php";

// Check if booking ID and user ID are provided
if (!isset($_POST['booking_id']) || !isset($_POST['user_id'])) {
    die("Booking ID or User ID is not provided.");
}

// Retrieve booking ID and user ID from frontend
$booking_id = $_POST['booking_id'];
$user_id = $_POST['user_id'];

// Update assigned_user_id in Bookings table
$query = "UPDATE Bookings SET assigned_user_id = ? WHERE booking_id = ?";
$stmt = $mysqli->prepare($query);
$stmt->bind_param("ii", $user_id, $booking_id);

if ($stmt->execute()) {
    // Send email and SMS notifications to admin and user
    // Add code to send notifications here

    echo "User assigned successfully!";
} else {
    echo "Error assigning user: " . $mysqli->error;
}

// Close statement and database connection
$stmt->close();
$mysqli->close();
?>


unassign_user.php

<?php
// Include database connection file
require_once "db_connection.php";

// Check if booking ID is provided
if (!isset($_POST['booking_id'])) {
    die("Booking ID is not provided.");
}

// Retrieve booking ID from frontend
$booking_id = $_POST['booking_id'];

// Update assigned_user_id to NULL in Bookings table
$query = "UPDATE Bookings SET assigned_user_id = NULL WHERE booking_id = ?";
$stmt = $mysqli->prepare($query);
$stmt->bind_param("i", $booking_id);

if ($stmt->execute()) {
    // Send email and SMS notifications to admin and previously assigned user
    // Add code to send notifications here

    echo "User unassigned successfully!";
} else {
    echo "Error unassigning user: " . $mysqli->error;
}

// Close statement and database connection
$stmt->close();
$mysqli->close();
?>


Twilio: Twilio offers a trial account with free credits that you can use to send SMS messages. However, it's important to note that Twilio's free trial is limited in terms of the number of messages you can send.
Nexmo: Nexmo, now part of Vonage, provides APIs for sending SMS messages globally. They may offer free credits for new users, but you would need to check their current offerings and pricing.
Plivo: Plivo is another service provider that offers APIs for sending SMS messages. They may have free trial options or pricing plans suitable for your needs.
ClickSend: ClickSend provides SMS services with a pay-as-you-go pricing model, but they also offer a free trial with a limited number of credits for new users.
BulkSMS: BulkSMS offers SMS services with various pricing plans, including a free trial option. They may have coverage in Denmark.

Twilio example:

<?php

// Include the Twilio PHP library
require_once 'path/to/twilio-php/Services/Twilio.php';

// Twilio Account SID and Auth Token
$account_sid = 'YOUR_TWILIO_ACCOUNT_SID';
$auth_token = 'YOUR_TWILIO_AUTH_TOKEN';

// Twilio phone number (sender)
$twilio_number = 'YOUR_TWILIO_PHONE_NUMBER';

// Recipient's phone number
$to_number = 'RECIPIENT_PHONE_NUMBER';

// Message to send
$message = 'Hello from Twilio!';

try {
    // Initialize Twilio client
    $client = new Services_Twilio($account_sid, $auth_token);
    
    // Send SMS message
    $client->account->messages->create(array(
        'To' => $to_number,
        'From' => $twilio_number,
        'Body' => $message,
    ));

    echo "SMS sent successfully!";
} catch (Exception $e) {
    echo "Error: " . $e->getMessage();
}


